@using CSIProductConfigurationCommon.Models;
@using CSIProductConfigurationCommon.Enums;

@model List<ConfigurationTypeParameter>

@{
    List<ConfigurationTypeParameter> sortedList = Model.OrderBy(a => a.DisplayOrder).ToList();
    int i = 1;
}

@foreach (ConfigurationTypeParameter item in sortedList)
{

    if (i % 2 == 1)
    {
        @Html.Raw("<div class=\"row\">")
    }

    <div class="form-group col-md-6">

        @Html.Label(item.ParameterLabel, new { @class = "control-label col-md-4" })

        <div class="col-md-8">

            @if (item.IsHasValues)
            {
                if (item.ParameterValues.Count > 3)
                {
                    @Html.DropDownList(item.ParameterName + "ParamDropDown", new SelectList(item.ParameterValues.OrderBy(a => a.Value).ToList(), "ParameterID", "Label"), "", htmlAttributes: new { @class = "form-control", @data_val = "true", @data_val_required = item.ParameterName + " is required." })
                    @Html.ValidationMessage(item.ParameterName + "ParamDropDown", htmlAttributes: new { @class = "text-danger" })
                }
                else
                {
                    <div class="btn-group-justified" data-toggle="buttons">
                        @foreach (ParameterValue paramVal in item.ParameterValues.OrderBy(a => a.Value).ToList())
                        {
                            <label class="btn btn-default btn-block" onclick="$('[name=@(item.ParameterName)HiddenValidator]').val(this.innerText)">
                                <input type="radio" name="@item.ParameterName" id="@paramVal.ParameterID" autocomplete="off">@paramVal.Value
                            </label>
                        }
                    </div>
                    @Html.Hidden(item.ParameterName + "HiddenValidator", "", htmlAttributes: new { @class = "form-control", @id = item.ParameterID + "HiddenValidator", @data_val = "true", @data_val_required = item.ParameterName + " is required." })
                    @Html.ValidationMessage(item.ParameterName + "HiddenValidator", htmlAttributes: new { @class = "text-danger" })

                }
            }
            else
            {
                if (item.ParameterType1 == AttributeType.IntegerType)
                {
                    
                        <div id="@(item.ParameterName)Slider"></div>
                        
                    
                        @Html.TextBox(item.ParameterName + "SliderBox", "0", htmlAttributes: new { @id = item.ParameterID, @class = "form-control", @readonly = "readonly", @style = "display:none" })
                    
                }
                else
                {
                    if (item.ParameterType1 == AttributeType.BooleanType)
                    {
                        <div class="btn-group-justified" data-toggle="buttons">
                            <label class="btn btn-default" onclick="$('[name=@(item.ParameterName)HiddenValidator]').val(this.innerText)">
                                <input type="radio" name="@(item.ParameterName)RadioButton" id="@(item.ParameterID)" autocomplete="off">yes
                            </label>
                            <label class="btn btn-default" onclick="$('[name=@(item.ParameterName)HiddenValidator]').val(this.innerText)">
                                <input type="radio" name="@(item.ParameterName)RadioButton" id="@(item.ParameterID)" autocomplete="off">no
                            </label>
                        </div>
                        @Html.Hidden(item.ParameterName + "HiddenValidator", "", htmlAttributes: new { @class = "form-control", @id = item.ParameterID + "HiddenValidator", @data_val = "true", @data_val_required = item.ParameterName + " is required." })
                        @Html.ValidationMessage(item.ParameterName + "HiddenValidator", htmlAttributes: new { @class = "text-danger" })
                    }
                    else
                    {
                        @Html.Editor(item.ParameterName + "Editor", new { htmlAttributes = new { @class = "form-control", @id = item.ParameterID, @data_val = "true", @data_val_required = item.ParameterName + " is required." } })
                        @Html.ValidationMessage(item.ParameterName + "Editor", htmlAttributes: new { @class = "text-danger" })
                    }
                }
            }
        </div>
    </div>

    if (i % 2 == 0 || (i % 2 == 1 && i == Model.Count()))
    {
        @Html.Raw("</div>")
    }

    i++;

}

