@using CSIProductConfigurator_front.Models;

@{
    ViewBag.Title = "Home Page";
}

@model ConfigurationView

@using (Html.BeginForm("Contact", "Home", FormMethod.Post, htmlAttributes: new { @id = "MainForm" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <div class="container">
            <div class="panel-group">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            Panel heading goes here
                        </h4>
                    </div>
                    <div class="panel-body">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.SelectedConfigurationType, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.SelectedConfigurationType, new SelectList(Model.ConfigurationTypes, "ID", "Name"), "-- Choose configuration type --", htmlAttributes: new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.SelectedCustomerCode, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.SelectedCustomerCode, new SelectList(Model.CustomerCodes), "-- Choose customer code --", htmlAttributes: new { @class = "form-control" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="panel-group">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            Panel heading goes here
                        </h4>
                    </div>
                    <div id="collapse1" class="panel-collapse collapse">
                        <div class="panel-body">
                            <div id="configurationTypeContent"></div>
                        </div>

                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="panel-group">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            Panel heading goes here
                        </h4>
                    </div>

                    <div class="panel-body">
                        <div class="container">
                            <div class="row">
                                <div class="col-md-4">
                                    @Html.ListBoxFor(model => model.ListOfConfigurationParameterValues, new SelectList(""));
                                </div>
                                <div class="col-md-4">
                                    <input type="button" id="Submit" value="PopulateListBox" />
                                </div>
                                <div class="col-md-4">
                                    <input type="submit" value="Create" class="btn btn-default" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

<script>

    $('[id^=Submit]').on('click', function () {
        $('#ListOfConfigurationParameterValues').empty();                               // Clear the contents of parameter list box known as ListOfConfigurationParameterValues

        $('[id$=ParamDropDown] :selected').each(function ()                             // Selected value for each item ending with ParamDropDown, add to ListOfConfigurationParameterValues
        {
            $('#ListOfConfigurationParameterValues').append($('<option>',
                {
                    value: $(this).val() + "|" + $(this).text(), text: $(this).text()       // Hack to pass parameter id and value through to the back end. String will be split later
                }));
        });

        $('[name$=Editor]').each(function ()                                            // For each free text editor field, add to ListOfConfigurationParameterValues
        {
            $('#ListOfConfigurationParameterValues').append($('<option>',
                {
                    value: $(this).attr("id") + "|" + $(this).val(), text: $(this).val()    // Hack to pass parameter id and value through to the back end. String will be split later
                }));
        });
    });                                                                                 // End result is a list box containing all parameter IDs and their values


    $('#collapse1').on('hidden.bs.collapse', function ()                                // Once the collapsible panel has finished collapsing
    {
        var id = $('[id^=SelectedConfigurationType]').val();                            // Find which configuration we need to display parameters for

        $('#configurationTypeContent').load("/Home/ConfigurationTypeParameterList/" + id, function (response, status)     // Populate the div with the parameter list
        {
            var form = $('#MainForm')
                .removeData("validator")
                .removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);                                       // Clear the form validation and parse again. Necessary to appply validation to new dynamic items
            $('#collapse1').collapse('show');                                         // We can now expand the panel and show the parameter list
            initSliders();
            return;
        });
    });


    $('[id^=SelectedConfigurationType]').on('change', function (e)                    // Contents of the dropdown has changed, a configuration has been selected
    {
        if (e.currentTarget.selectedIndex == 0) {
            return;                                                                     // Do nothing if first item (prompt message) selected
        }

        var isExpanded = $('#collapse1').attr("aria-expanded");                         // Is the collapsible expanded or not?

        if (isExpanded == 'true') {
            $('#collapse1').collapse('hide');                                           // If it is, then hide it. Execution then passes to the hidden.bs.collapse event above.
        }
        else {                                                                               // The collapsible is not expanded, so we can safely load the div
            $('#configurationTypeContent').load("/Home/ConfigurationTypeParameterList/" + e.currentTarget.value, function (response, status) {
                var form = $('#MainForm')                                               // Note repeated code from above.
                    .removeData("validator")
                    .removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse(form);
                $('#collapse1').collapse('show');
                initSliders();
                return;
            });
        }
        return;
    });

</script>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
