@using CSIProductConfigurator_front.Models;

@{
    ViewBag.Title = "Home Page";
}

@model ConfigurationView

@using (Html.BeginForm("Contact", "Home", FormMethod.Post, htmlAttributes: new { @id = "MainForm" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <div class="container">
            <div class="panel-group">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            Customer and configuration
                        </h4>
                    </div>
                    <div class="panel-body">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.SelectedConfigurationType, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.SelectedConfigurationType, new SelectList(Model.ConfigurationTypes, "ID", "Name"), "-- Choose configuration type --", htmlAttributes: new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.SelectedCustomerCode, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.SelectedCustomerCode, new SelectList(Model.CustomerCodes), "-- Choose customer code --", htmlAttributes: new { @class = "form-control" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="panel-group">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            Configuration properties
                        </h4>
                    </div>
                    <div id="collapse1" class="panel-collapse collapse">
                        <div class="panel-body">
                            <div id="configurationTypeContent"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="panel-group">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            Calculate and output
                        </h4>
                    </div>

                    <div id="collapse2" class="panel-collapse collapse">
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <button type="submit" class="btn btn-default" id="submitButton" data-loading-text="<i class=&quot;fa fa-spinner fa-spin&quot;></i> Calculating...">Calculate</button>
                                    
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12" id="configurationTypeOutputs">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @Html.ListBoxFor(model => model.ListOfConfigurationParameterValues, new SelectList(""), htmlAttributes: new { @hidden = "hidden" })

}

<script>

    //<button class="btn btn-default" id="JSONbutton">JSON</button>

    $('#JSONbutton').click(() => {
        var stringThing = "[{\"Name\":\"TCV\",\"Label\":\"Total Contract Value (TCV)\",\"Action\":\"TermMarginPlusCosts\",\"ActionType\":0,\"ConfigurationTypeID\":\"c95bdb27-bbf8-499d-977a-8deee2b16482\",\"ValueType\":2,\"IsProcessed\":true,\"Value\":\"3711319.72947758\",\"Id\":\"ad18cd89-90dc-4bef-905b-941ef1108119\",\"RowVersion\":\"AAAAAAAACAQ=\",\"DateCreated\":\"2018-06-18T08:16:55.43+01:00\",\"DateModified\":\"2018-06-18T08:16:55.43+01:00\",\"CreatedBy\":\"GS\",\"ModifiedBy\":\"GS\"},{\"Name\":\"AnnualPrice\",\"Label\":\"AnnualPrice\",\"Action\":\"AnnualEndUserPrice\",\"ActionType\":0,\"ConfigurationTypeID\":\"c95bdb27-bbf8-499d-977a-8deee2b16482\",\"ValueType\":2,\"IsProcessed\":false,\"Value\":\"1237106.57649253\",\"Id\":\"93e6f178-a742-4176-80f6-159b4577268c\",\"RowVersion\":\"AAAAAAAACAU=\",\"DateCreated\":\"2018-06-18T12:40:48.67+01:00\",\"DateModified\":\"2018-06-18T12:40:48.67+01:00\",\"CreatedBy\":\"GS\",\"ModifiedBy\":\"GS\"}]"

        var someMoreJSON = $.parseJSON(stringThing);

        $.each(someMoreJSON, (index,outputType) => {
            
        });
    })

    $('#MainForm').submit(function (e) {

        e.preventDefault();                                                             // intercept Submit function. We can still use a submit form button and the validation works,

        /*
        $('[name$=HiddenValidator]').each(function () {
            console.log("obbers %o", this);
        });
        */
         
        var validator = $(this).validate();
        if (validator.form()) {

            $('#submitButton').button('loading');
            
            $('#ListOfConfigurationParameterValues').empty();                               // Clear the contents of parameter list box known as ListOfConfigurationParameterValues

            $('[id$=ParamDropDown] :selected').each(function () {                            // Selected value for each item ending with ParamDropDown, add to ListOfConfigurationParameterValues
                $('#ListOfConfigurationParameterValues').append($('<option>',
                    {
                        value: $(this).val() + "|" + $(this).text(), text: $(this).text()       // Hack to pass parameter id and value through to the back end. String will be split later
                    }));
            });

            $('[name$=Editor]').each(function () {                                           // For each free text editor field, add to ListOfConfigurationParameterValues
                $('#ListOfConfigurationParameterValues').append($('<option>',
                    {
                        value: $(this).attr("id") + "|" + $(this).val(), text: $(this).val()    // Hack to pass parameter id and value through to the back end. String will be split later
                    }));
            });

            $(".btn.active").each(function () {

                //console.dir(this);

                $('#ListOfConfigurationParameterValues').append($('<option>',               // For each active button, add value to ListOfConfigurationParameterValues
                    {
                        value: $.trim(this.firstElementChild.id + "|" + this.innerText), text: $.trim(this.innerText)    // Hack to pass parameter id and value through to the back end. String will be split later
                    }));
            });

            $("[name$=SliderBox]").each(function () {                                       // For each slider text box, add active value to ListOfConfigurationParameterValues
                $('#ListOfConfigurationParameterValues').append($('<option>',
                    {
                        value: $(this).attr("id") + "|" + $(this).val(), text: $(this).val()    // Hack to pass parameter id and value through to the back end. String will be split later
                    }));
            });

            $("#ListOfConfigurationParameterValues option").prop("selected", true);         // Select each one in the list or the values won't be submitted with the form

            var form = $(this);
            var url = form.attr('action');
            var formData = form.serialize();

            console.log('------------formdata begins------');
            console.log(formData);
            console.log('------------formdata ends------');

            $.ajax({
                type: "POST",
                url: url,
                data: formData,
                success: (data) => {

                    console.log(data);

                    var someJSON = $.parseJSON(data);

                    $.each(someJSON.ConfigurationTypeOutputs, (index,outputType) => {
                        $('#' + outputType.Name).val(outputType.Value);
                    });

                    $('#submitButton').button('reset');

                },
                error: (jqXHR, textStatus, errorThrown) => {
                    console.log(textStatus);
                    console.log(errorThrown);
                    $('#submitButton').button('reset');
            }
            });
        }
    });                                                                                 // End result is a list box containing all parameter IDs and their values

    $('#collapse1').on('hidden.bs.collapse', function ()                                // Once the collapsible panel has finished collapsing
    {
        $('#collapse2').collapse('hide');                                               // Always hide the output panel too, once the parameter panel is fully closed

        var id = $('[id^=SelectedConfigurationType]').val();                            // Find which configuration we need to display parameters for

        $('#configurationTypeContent').load("/Home/ConfigurationTypeParameterList/" + id, function (response, status) {    // Populate the div with the parameter list
            var form = $('#MainForm')
                .removeData("validator")
                .removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);                                        // Clear the form validation and parse again. Necessary to appply validation to new dynamic items
            $('#collapse1').collapse('show');                                           // We can now expand the panel and show the parameter list
            initSliders();                                                              // Add start, end and step values to sliders, along with other properties maintained in sliders.js
            $("#MainForm").data("validator").settings.ignore = "";                      // Allows validation of every form item which includes the hidden field for the buttons
            return;
        });
    });

    $('#collapse1').on('shown.bs.collapse', function () {                               // Once the parameter panel is fully shown

        var id = $('[id^=SelectedConfigurationType]').val();

        $('#configurationTypeOutputs').load("/Home/ConfigurationTypeOutputList/" + id, (response, status) => { // load up the output panel...

            if (response.length < 5) {
                $('#configurationTypeOutputs').html("<label class=\"btn-warning\">Error - 0 output types returned</label>");
            }
            if (status == "error") {
                $('#configurationTypeOutputs').html("<label class=\"btn-warning\">Error loading Output types</label>");
            }
            $('#collapse2').collapse('show');                                                                       // and display it
        });
    });

    $('[id^=SelectedConfigurationType]').on('change', function (e)                    // Contents of the dropdown has changed, a configuration has been selected
    {
        if (e.currentTarget.selectedIndex == 0) {
            return;                                                                     // Do nothing if first item (prompt message) selected
        }

        var isCollapse1Expanded = $('#collapse1').attr("aria-expanded");                         // Is the collapsible expanded or not?

        if (isCollapse1Expanded == 'true') {
            $('#collapse1').collapse('hide');                                           // If it is, then hide it. Execution then passes to the hidden.bs.collapse event above.
        }
        else {                                                                               // The collapsible is not expanded, so we can safely load the div
            $('#configurationTypeContent').load("/Home/ConfigurationTypeParameterList/" + e.currentTarget.value, function (response, status) {
                var form = $('#MainForm')                                               // Note repeated code from above.
                    .removeData("validator")
                    .removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse(form);
                $('#collapse1').collapse('show');
                initSliders();
                $("#MainForm").data("validator").settings.ignore = "";                  // Allows validation of every form item which includes the hidden field for the buttons
                return;
            });
        }

        return;
    });

</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
